name: Make
on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      - name: Make
        run: poetry run poe make

      - name: Upload the artifacts
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '*.sh'

      # #----------------------------------------------
      # #       run pyright
      # #----------------------------------------------
      # - name: Run pyright
      #   uses: jakebailey/pyright-action@v1
      #   with:
      #     venv-path: "."

      # #----------------------------------------------
      # #       run python style checks
      # #----------------------------------------------
      # - name: Black
      #   run: poetry run black . --check
      # - name: Flake8
      #   run: poetry run flake8
      # - name: isort
      #   run: poetry run isort . -c

      # - name: Check __init__ files with mkinit
      #   # Cryptic code to check if check_mkinit returns only whitespace.
      #   # If it does, the check passes. Adapted from
      #   # https://stackoverflow.com/questions/9767644/test-if-string-has-non-whitespace-characters-in-bash
      #   run: "[[ $(poetry run poe -q check_mkinit ) != *[![:space:]]* ]] || (echo 'Run poetry run poe mkinit to correct __init__ files' && exit 1)"


  # test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: [ "3.7", "3.8", "3.9" ]
  #   steps:
  #     #----------------------------------------------
  #     #       check-out repo and set-up python
  #     #----------------------------------------------
  #     - name: Check out repository
  #       uses: actions/checkout@v2
  #     - name: Set up python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install tox
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install tox tox-gh-actions tox-poetry-installer[poetry]
  #     - name: Run tests
  #       run: tox